https://github.com/mehmetozkaya/AspnetMicroservices/tree/main/src/Services/Catalog/Catalog.API/Data


- docker pull mongo
- docker run -d -p 27017:27017 --name shopping-mongo mongo   (here -d means detached ie disconnected)
- docker ps
- docker logs -f shopping-mongo
- docker exec -it shopping-mongo /bin/bash     (-it means interative mode ie mongo command line)
- To use mongo CLI commands
	- type "mongo" in the interactive command line
- Mongo Command
	* To show databases
		** show dbs   /shows databases
	* Create and switch to dabase
		** use CatalogDb
	* List down all the collection in the database (Tables)
		** show collections
 	* To Create Collection
		** db.createCollection('Products')
	* Insert to the collection
		** db.Products.insert()
		** db.products.insertMany([{'Name':'Asus Laptop','Category':'Computer','Summary':'Summary','Description':'Description','ImageFile':'ImageFile','Price':54.93},{'Name':'HP Laptop','Category':'Computer','Summary':'Summary','Description':'Description','ImageFile':'ImageFile','Price':88.93}])
	* To list collections items
		** db.Products.find({}).pretty()
	* To remove collection items
		** db.Products.remove({})



- Install Nuget package MongoDB.Driver
	* Install-Package MongoDB.Driver -Version 2.12.0    (What ever version is latest. check nuget.org and search for mongodb.Driver. Ignoring version will install lastest)

- Add project to a container, 
	1. From visual studion, righ click project and Add -> select Container Orchestration support, 
	2. Select docker compose from the popup menu.
	3. Select Linux from popup  -> Here Dockerfile will be added to the project and New project added named docker-compose. docker-compose has tow file "docker-compose.yml" and "docker-compose.override.yml"
	4. Run button change with docker-compose as start-up
	
- Dockerfile within the project has the configuration details to pull neccessary docker image to setup the environment,
	restore, compile and publish the project into the docker image

	
	
 docker-compose.yml
 ------------------
 version: '3.4'

services:
  catalogdb:     -> used to create container in override yml
    image: mongo  --> this is the image to create container

  catalog.api: --> it is another container in override file
    image: ${DOCKER_REGISTRY-}catalogapi
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
volumes:    --> volumn is the local/host file location to store data so eventhough container got deleted data will be there
  mongo_data:   ->where store will be configure in the overrde file
  
 docker-compose.override.yml
 ---------------------------
 version: '3.4'

services:
  catalogdb:   -> this is the service we specify in the docker-compose file
    container_name: catalogdb    - this is the container
    restart: always
    ports:
      - "27017:27017"      -> mappimng the container port to local port
    volumes:
      - mongo-data:/data/db    -> mongo-data is the volumn we created in the docker-compose and /data/db is the location to store data

  catalog.api:   ----> this our actual service we are going to add our all services like this
    container_name: catalog.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "DatabaseSettings:ConnectionString=mongodb://catalogdb:27017"    -> this will override appsetting file connection string
    depends_on:																	with mongodb is the container which db running on 
      - catalogdb     -> this depends on the catalogdb it is enforcing 	the creation of db before creating the service
    ports:
      - "8000:80"      -> 80n port mostly occupaid with iis so we mapped it to some other port, we can go 8000, 8001 ..




- Stop and remove all the container and images
- run docker-compose -f .\docker-compose.yml -f .\docker-compose.override.yml up -d


mongo client :
docker run -d -p 3000:3000 mongoclient/mongoclient

Setup Redis on docker container
- Got hub.docker.com and search for redis
- docker pull redis
- docker run -d -p 6379:6379 --name aspnetrun-redis redis
- docker exec -it aspnetrun-redis /bin/bash
- redis-cli     -> it opens redis command line tool
- If you give ping then redis container, you will Pong response
- Redsi Commands
	* set key value  -> set a key as key and value as "name"
	* get key   -> display the value for the key key
	* set name Newman   - Key:name, Value:Newman
- Nuget Packages
	* Install-Package Microsoft.Extensions.Caching.StackExchangeRedis
	Update-Package ProjectName Basket.API   -- Update any updates on the nueget packages


-When we convert out basket project into container we use redis:alpine version because it is lighter and fast.

Portainer: (portainer.io)
----------
- It is a open source container management tool. 
- It is used to manage environments, deploy applications, monitor app performance and triage problem
- Can manage Kubernetes, Docker, Docker Swarm, Azure ACI and Edge environments

Url : portainer.readthedocs.io/en/stable/deployment.html
	https://docs.portainer.io/v/ce-2.11/start/intro
	
	1. docker pull portainer/portainer-ce
	2. 
 

pgAdmin : is the most popular and feature rich open source administration and development plateform for PostgresSQL.

CREATE TABLE Coupon(
	ID SERIAL 	PRIMARY KEY NOT NULL,
	ProductName	VARCHAR(24) NOT NULL,
	Description	TEXT,
	Amount 		INT
);

INSERT INTO Coupon(productname, description, amount) VALUES('IPhone X', 'IPhone Discount', 150);
INSERT INTO Coupon(productname, description, amount) VALUES('Samsung 10', 'Somsung 10 Discount', 100);


DiscountApi
--------------
Nuget Packages
	- Npgsql - used to connect postgress db from .net
	- Dapper - ORM

- Update-Package -ProjectName Discount.API  -- this will update all nuget packages if it has any latest version
